/*
This is the MexicoEn140 main app.
Its structure/procedure is as follows:

	1. invoke libs
	2. configure express
	3. configure twitter
	4. change in natural/lib/natural/tfidf: WordTokenizer -> RegexpTokenizer, maybe
	5. functions
	6. backend operation twitter collecting || cron || database
	7. routings || passing by index.html plus json in 
	8. app listen

*/


// 1. invoke requirements
var port = (process.env.VCAP_APP_PORT || 3000),
	express = require('express'),
	twitter = require('twitter'),
	natural = require('natural'),
	cronJob = require('cron');
	
// 2. express app basic config
var app = express();
app.use('/public', express.static('public'));

// 3. twitter API config and object
var config = {
    consumer_key: '7YukpNp6LqadnEk2RQiOzoBms',
    consumer_secret: 'Tx8zM0apLR5sG0uCVQltobohacjnCK07KP6gs1EQBv5WHiJnFn',
    access_token_key: '3229960759-0KFnQwIJ2dKPhCnqIonjExuvPkhXndj4Y1JqwpL',
    access_token_secret: 'K5yGTcfqUjKEmzAe6vTthELmVo59Wk2OZinkPECPOUF7P',
    };

var twAPI = new twitter(config);
var lastId, lastTweet;
var data = [];
var params = {}
var thisId;


// 6. collecting and buildng jsons periodically
var job = new cronJob.CronJob({
        cronTime: '00 *2 * * * *',
        onTick: getListHistory("mx140-opinion", function(err, data){
                    console.log ("\n.::Doin the task::.");
                    if(err){
                        console.log("Fallo en getListHistory según el cb:" + err);
                    } else {
                        lastTweet = data[0];
       		            console.log("[created at]: " + lastTweet.created_at + "\t[user]: " + 
                            lastTweet.user.screen_name + "\n[text]: " + lastTweet.text);
                    }
                    console.log(new Date().toISOString() + ' .:ok:. ');
                }),
        start: true,
        timeZone: 'America/Los_Angeles',
    });

job.start();


// ----------------------------- -----------------------------
var personalSpace = {};
personalSpace.tweetCount = null;
personalSpace.twitterStream = null;
// This factory function is execute once amd returns a
// function cronjobCallback() which is called every 5 minutes and has access
// to our namespace so we can use our counter variable without polluting the
// the global namespace
personalSpace.cronjobCallbackFactory = function cronjobCallbackFactory() {
    'use strict';
    // In this variable a reference to personalSpace is stored. The returned
    // function has access to. (This is a so called closure. In JavaScript a
    // function has access to all variables of the context the function was
    // declared in.)
    var daSpace = this; // Often also written as "var that = this;"

    // This is function passed to cronjob as callback function. When it is
    // called, it has no direct access to personalSpace in fact 'this' within
    // the callback would refer to the calling object.
    // (In this example the object personalSpace is global, and you could just
    // access it globally, but when you give it another name, do you want to
    // rename the reference to the global personalSpace in every function you
    // store in the namespace?)
    return function cronjobCallback() {
        // If the function has been called already, time to save the statistic
        if (daSpace.tweetCount !== null) {
            client.collection("TweetsNumber").insert({
                Date: new Date(),
                CrawledTweets: daSpace.tweetCount,
                Channel: "someChannel"
            });
            console.log(daSpace.tweetCount + " tweets saved in DB");
            // Be polite and tell twitter you stop the stream for now. ;-)
            daSpace.twitterStream.stop();
        } else {
            // The function has been called the first time, so we initalize the
            // counter
            daSpace.tweetCount = 0;
        }
        // start the stream
        daSpace.twitterStream = T.stream(
            'statuses/filter',
            {track: 'hashtag'}
        );
        // bind the 'tweet' event
        daSpace.twitterStream.on('tweet', function onTweet(tweet) {
            console.log(tweet);
            // this function has also access to the daSpace [=== personalSpace]
            // object
            daSpace.tweetCount += 1;
        });
    };
};
// Start the cronJob
new cronJob(
    '00 */5 * * * *',
    personalSpace.cronjobCallbackFactory(),
    null,
    true,
    "Europe/Paris"
);
// ----------------------------- -----------------------------




// 7. routings
app.get("/", function (req, res) {
    //send "Hello World" to the client as html
    res.send("<h2>Esta es la raíz</h2");
}); 


// 8. testing onthefly json transfering
app.get("/last.json", function	(req, res) {    
	jsonObject = lastTweet
    res.json(jsonObject);
    });


// 8. app listening
app.listen(port);
console.log("\t d[-_-]b Up & running on port :: " + port);

// 5. functions
function getListHistory(listname, cb) {
    fetchTL();
    // fetchTL wrapper function declaration
    function fetchTL(lastId) {
        var params = {
            owner_screen_name: 'MX_en140',
            slug: listname,
            count: 200,
            max_id: lastId
        };
        // here it is the real fetch
        twAPI.get('lists/statuses', params, cb_onTL);
        console.log(".:: Task ended ::.");

        // define the callback for the fetched TimeLine
        function cb_onTL(err, chunk) {
            if (err) {
                console.log('[x_x]: fallo en cb_onTL');
                return cb(err);
            }
            // update data and new maxId
            if (data.length) chunk.shift();
            data = data.concat(chunk);
            thisId = parseInt(data[data.length - 1].id_str);
            lastId = thisId;
            console.log("Data updated " + data.length + "\t with " + thisId);
            // if retrieve something
            /*
            if (chunk.length>2) {
                fetchTL(thisId);
            } else {
            */
                return cb(err, data);
            //}
        } // end cb_onTL
    } // end fetchTL
} // end getListHistory